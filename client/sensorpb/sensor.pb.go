// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sensor.proto

package sensorpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SensorRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SensorRequest) Reset()         { *m = SensorRequest{} }
func (m *SensorRequest) String() string { return proto.CompactTextString(m) }
func (*SensorRequest) ProtoMessage()    {}
func (*SensorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c749425f02243e2d, []int{0}
}

func (m *SensorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensorRequest.Unmarshal(m, b)
}
func (m *SensorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensorRequest.Marshal(b, m, deterministic)
}
func (m *SensorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorRequest.Merge(m, src)
}
func (m *SensorRequest) XXX_Size() int {
	return xxx_messageInfo_SensorRequest.Size(m)
}
func (m *SensorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SensorRequest proto.InternalMessageInfo

type SensorResponse struct {
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SensorResponse) Reset()         { *m = SensorResponse{} }
func (m *SensorResponse) String() string { return proto.CompactTextString(m) }
func (*SensorResponse) ProtoMessage()    {}
func (*SensorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c749425f02243e2d, []int{1}
}

func (m *SensorResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensorResponse.Unmarshal(m, b)
}
func (m *SensorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensorResponse.Marshal(b, m, deterministic)
}
func (m *SensorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorResponse.Merge(m, src)
}
func (m *SensorResponse) XXX_Size() int {
	return xxx_messageInfo_SensorResponse.Size(m)
}
func (m *SensorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SensorResponse proto.InternalMessageInfo

func (m *SensorResponse) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*SensorRequest)(nil), "sensors.SensorRequest")
	proto.RegisterType((*SensorResponse)(nil), "sensors.SensorResponse")
}

func init() {
	proto.RegisterFile("sensor.proto", fileDescriptor_c749425f02243e2d)
}

var fileDescriptor_c749425f02243e2d = []byte{
	// 148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0xcd, 0x2b,
	0xce, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0xf0, 0x8a, 0x95, 0xf8, 0xb9,
	0x78, 0x83, 0xc1, 0xcc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x25, 0x35, 0x2e, 0x3e, 0x98,
	0x40, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x08, 0x17, 0x6b, 0x59, 0x62, 0x4e, 0x69, 0xaa,
	0x04, 0xa3, 0x02, 0xa3, 0x06, 0x73, 0x10, 0x84, 0x63, 0x34, 0x89, 0x91, 0x8b, 0x0d, 0xa2, 0x50,
	0xc8, 0x91, 0x8b, 0x2b, 0x24, 0x35, 0xb7, 0x00, 0xca, 0x13, 0xd3, 0x83, 0x9a, 0xad, 0x87, 0x62,
	0xb0, 0x94, 0x38, 0x86, 0x38, 0xc4, 0x7c, 0x25, 0x06, 0x03, 0x46, 0x21, 0x57, 0x2e, 0x3e, 0x8f,
	0xd2, 0xdc, 0xcc, 0x94, 0xcc, 0x92, 0x4a, 0x0a, 0x8c, 0x71, 0xe2, 0x8a, 0xe2, 0x80, 0xc8, 0x16,
	0x24, 0x25, 0xb1, 0x81, 0x7d, 0x6a, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xe9, 0xec, 0x77,
	0xf9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SensorClient is the client API for Sensor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SensorClient interface {
	TempSensor(ctx context.Context, in *SensorRequest, opts ...grpc.CallOption) (Sensor_TempSensorClient, error)
	HumiditySensor(ctx context.Context, in *SensorRequest, opts ...grpc.CallOption) (Sensor_HumiditySensorClient, error)
}

type sensorClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorClient(cc grpc.ClientConnInterface) SensorClient {
	return &sensorClient{cc}
}

func (c *sensorClient) TempSensor(ctx context.Context, in *SensorRequest, opts ...grpc.CallOption) (Sensor_TempSensorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sensor_serviceDesc.Streams[0], "/sensors.Sensor/TempSensor", opts...)
	if err != nil {
		return nil, err
	}
	x := &sensorTempSensorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sensor_TempSensorClient interface {
	Recv() (*SensorResponse, error)
	grpc.ClientStream
}

type sensorTempSensorClient struct {
	grpc.ClientStream
}

func (x *sensorTempSensorClient) Recv() (*SensorResponse, error) {
	m := new(SensorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sensorClient) HumiditySensor(ctx context.Context, in *SensorRequest, opts ...grpc.CallOption) (Sensor_HumiditySensorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sensor_serviceDesc.Streams[1], "/sensors.Sensor/HumiditySensor", opts...)
	if err != nil {
		return nil, err
	}
	x := &sensorHumiditySensorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sensor_HumiditySensorClient interface {
	Recv() (*SensorResponse, error)
	grpc.ClientStream
}

type sensorHumiditySensorClient struct {
	grpc.ClientStream
}

func (x *sensorHumiditySensorClient) Recv() (*SensorResponse, error) {
	m := new(SensorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SensorServer is the server API for Sensor service.
type SensorServer interface {
	TempSensor(*SensorRequest, Sensor_TempSensorServer) error
	HumiditySensor(*SensorRequest, Sensor_HumiditySensorServer) error
}

// UnimplementedSensorServer can be embedded to have forward compatible implementations.
type UnimplementedSensorServer struct {
}

func (*UnimplementedSensorServer) TempSensor(req *SensorRequest, srv Sensor_TempSensorServer) error {
	return status.Errorf(codes.Unimplemented, "method TempSensor not implemented")
}
func (*UnimplementedSensorServer) HumiditySensor(req *SensorRequest, srv Sensor_HumiditySensorServer) error {
	return status.Errorf(codes.Unimplemented, "method HumiditySensor not implemented")
}

func RegisterSensorServer(s *grpc.Server, srv SensorServer) {
	s.RegisterService(&_Sensor_serviceDesc, srv)
}

func _Sensor_TempSensor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SensorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SensorServer).TempSensor(m, &sensorTempSensorServer{stream})
}

type Sensor_TempSensorServer interface {
	Send(*SensorResponse) error
	grpc.ServerStream
}

type sensorTempSensorServer struct {
	grpc.ServerStream
}

func (x *sensorTempSensorServer) Send(m *SensorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Sensor_HumiditySensor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SensorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SensorServer).HumiditySensor(m, &sensorHumiditySensorServer{stream})
}

type Sensor_HumiditySensorServer interface {
	Send(*SensorResponse) error
	grpc.ServerStream
}

type sensorHumiditySensorServer struct {
	grpc.ServerStream
}

func (x *sensorHumiditySensorServer) Send(m *SensorResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Sensor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sensors.Sensor",
	HandlerType: (*SensorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TempSensor",
			Handler:       _Sensor_TempSensor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HumiditySensor",
			Handler:       _Sensor_HumiditySensor_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sensor.proto",
}
